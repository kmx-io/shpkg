#!/bin/sh
# Copyright 2023 Thomas de Grivel <thodg@kmx.io>

set -e

# Config
SHPKG_DATE="$(date +%F_%T)"

SHPKG_DIR="${SHPKG_DIR:-${HOME}/shpkg}"

SHPKG_ETC_DIR="${SHPKG_DIR}/etc/shpkg"
SHPKG_INCLUDE_DIR="${SHPKG_DIR}/include"
SHPKG_LIB_DIR="${SHPKG_DIR}/lib"
SHPKG_SHARE_DIR="${SHPKG_DIR}/share/shpkg"
SHPKG_SRC_DIR="${SHPKG_DIR}/src"
SHPKG_VAR_DB_DIR="${SHPKG_DIR}/var/db/shpkg"

SHPKG_PREFIX="${SHPKG_DIR}"

# Console output
verbose__puts () {
    {
        if [ "x$1" = "x1" ]; then
            printf '\33[0;34m'
        elif [ "x$1" = "x2" ]; then
            printf '\33[0;35m'
        else
            err 1 "bad verbose level"
        fi
        shift
        echo -n "$@"
        printf '\33[0m\n'
    }
}

verbose () {
    if [ "x$1" = "x-n" ]; then
        shift
        verbose__puts "$@"
    else
        verbose__puts "$@"
        shift
        "$@"
    fi
}

err () {
    R="$1"
    shift
    {
        printf '\33[0;31m'
        echo -n "$0:" error: "$@"
        printf '\33[0m\n'
    } >&2
    verbose 1 exit "$R"
}

# C compiler
if [ "x${CC}" = "x" ]; then
    if which cc >/dev/null; then
        CC=cc
    elif which gcc >/dev/null; then
        CC=gcc
    elif which egcc >/dev/null; then
        CC=egcc
    else
        err 1 "C compiler not found."
    fi
fi
SHPKG_TARGET="$(LC_ALL=C.UTF-8 ${CC} -v 2>&1 | grep '^Target: ' | head -n 1 | cut -c 9-)"
export CPPFLAGS="${CPPFLAGS} -I${SHPKG_INCLUDE_DIR}"
export LDFLAGS="${LDFLAGS} -L${SHPKG_LIB_DIR}"
export PKG_CONFIG_PATH="${SHPKG_LIB_DIR}/pkgconfig"

SHPKG_TARGET_DIR="${SHPKG_DIR}/target/${SHPKG_TARGET}"

SHPKG_FAKE_DIR="${SHPKG_TARGET_DIR}/fake"
SHPKG_OBJ_DIR="${SHPKG_TARGET_DIR}/obj"
SHPKG_PACKAGE_DIR="${SHPKG_TARGET_DIR}/packages"
SHPKG_TAG_DIR="${SHPKG_TARGET_DIR}/tag"

# OS detection
SHPKG_OS="$(uname)"
if [ "x${SHPKG_OS}" = "xLinux" ]; then
    SHPKG_OS="${SHPKG_OS}/$(uname -a | grep -io -e Debian -e Gentoo -e Ubuntu)"
fi

SHPKG_OS_DIR="${SHPKG_SHARE_DIR}/${SHPKG_OS}"

# SHA256
if which sha256 >/dev/null 2>&1; then
    SHPKG_SHA256=sha256
elif which sha256sum >/dev/null 2>&1; then
    SHPKG_SHA256=sha256sum
else
    err 1 "sha256 executable not found"
fi

shpkg_sha256 () {
    sha256 "$@"
}

shpkg_sha256sum () {
    for F; do
        echo -n "SHA256 ($F) = "
        sha256sum "$F" | cut -d ' ' -f 1
    done
}

# Setup
if ! [ -d "${SHPKG_FAKE_DIR}" ]; then
    verbose 1 mkdir -p "${SHPKG_FAKE_DIR}"
fi
if ! [ -d "${SHPKG_PACKAGE_DIR}" ]; then
    verbose 1 mkdir -p "${SHPKG_PACKAGE_DIR}"
fi
if ! [ -d "${SHPKG_SRC_DIR}" ]; then
    verbose 1 mkdir -p "${SHPKG_SRC_DIR}"
fi
if ! [ -d "${SHPKG_VAR_DB_DIR}" ]; then
    verbose 1 mkdir -p "${SHPKG_VAR_DB_DIR}"
fi

# Repo index
SHPKG_REPO_INDEX="${SHPKG_SHARE_DIR}/repo_index"
if ! [ -f "${SHPKG_REPO_INDEX}" ]; then
    err 1 "${SHPKG_REPO_INDEX}: not found"
fi

shpkg_depends_on () {
    shpkg_repo_info "$@" | cut -d ' ' -f 5 | tr ',' ' '
}

shpkg_dir () {
    shpkg_repo_info "$@" | cut -d ' ' -f 2
}

shpkg_git_branch () {
    shpkg_repo_info "$@" | cut -d ' ' -f 4
}

shpkg_git_url () {
    shpkg_repo_info "$@" | cut -d ' ' -f 3
}

shpkg_repo_info () {
    [ "x$#" = "x1" ] || return 1
    grep "^$1 " "${SHPKG_REPO_INDEX}"
}

shpkg_src_parent_dir () {
    dirname "$(shpkg_dir "${SHPKG_REPO}")"
}

# Source repository
shpkg_clone () {
    for SHPKG_REPO; do
        SHPKG_REPO_DIR="$(shpkg_dir "${SHPKG_REPO}")"
        SHPKG_REPO_PARENT_DIR="$(shpkg_src_parent_dir "${SHPKG_REPO}")"
        SHPKG_REPO_GIT_BRANCH="$(shpkg_git_branch "${SHPKG_REPO}")"
        SHPKG_REPO_GIT_URL="$(shpkg_git_url "${SHPKG_REPO}")"
        SHPKG_REPO_BASENAME="$(basename "${SHPKG_REPO_DIR}")"
        if ! [ -d "${SHPKG_SRC_DIR}/${SHPKG_REPO_DIR}" ]; then
            verbose 1 mkdir -p "${SHPKG_SRC_DIR}/${SHPKG_REPO_PARENT_DIR}"
            ( verbose 1 cd "${SHPKG_SRC_DIR}/${SHPKG_REPO_PARENT_DIR}" &&
                  verbose 1 git clone "${SHPKG_REPO_GIT_URL}" -b "${SHPKG_REPO_GIT_BRANCH}" "${SHPKG_REPO_BASENAME}" &&
                  verbose 1 cd "${SHPKG_REPO_BASENAME}" &&
                  verbose 1 git submodule init &&
                  verbose 1 git submodule update
            )
        fi
    done
}

shpkg_fetch () {
    for SHPKG_REPO; do
        SHPKG_REPO_DIR="$(shpkg_dir "${SHPKG_REPO}")"
        ( verbose 1 cd "${SHPKG_SRC_DIR}/${SHPKG_REPO_DIR}" &&
              verbose 1 git fetch
        )
    done
}

shpkg_pull () {
    for SHPKG_REPO; do
        SHPKG_REPO_DIR="$(shpkg_dir "${SHPKG_REPO}")"
        ( verbose 1 cd "${SHPKG_SRC_DIR}/${SHPKG_REPO_DIR}" &&
              verbose 1 git pull &&
              verbose 1 git submodule update; )
    done
}

shpkg_clean_sources () {
    for SHPKG_REPO; do
        ( verbose 2 shpkg_clean_configure "${SHPKG_REPO}"; )
        SHPKG_REPO_DIR="$(shpkg_dir "${SHPKG_REPO}")"
        SHPKG_REPO_PARENT_DIR="$(shpkg_src_parent_dir "${SHPKG_REPO}")"
        verbose 1 rm -rf "${SHPKG_SRC_DIR}/${SHPKG_REPO_DIR}"
        verbose -n 1 "rmdir ${SHPKG_SRC_DIR}/${SHPKG_REPO_PARENT_DIR}"
        rmdir "${SHPKG_SRC_DIR}/${SHPKG_REPO_PARENT_DIR}" 2>/dev/null || true
    done
}

shpkg_version () {
    SHPKG_REPO_DIR="$(shpkg_dir "$1")"
    SHPKG_REPO_SRC_DIR="${SHPKG_SRC_DIR}/${SHPKG_REPO_DIR}"
    if [ -d "${SHPKG_REPO_SRC_DIR}/.git" ]; then
        SHPKG_REPO_HASH="$(git -C "${SHPKG_REPO_SRC_DIR}" show-ref --head HEAD | cut -d ' ' -f 1 | head -n 1)"
        SHPKG_REPO_HEAD="$(git -C "${SHPKG_REPO_SRC_DIR}" show-ref | grep "${SHPKG_REPO_HASH}" | grep ' refs/heads/' | sed -e 's,^.* refs/heads/,,')"
        echo "${SHPKG_REPO_HEAD}-${SHPKG_REPO_HASH}"
    fi
}

# Building from sources
shpkg_autogen () {
    verbose 2 shpkg_clone "$@"
    for SHPKG_REPO; do
        SHPKG_REPO_DIR="$(shpkg_dir "${SHPKG_REPO}")"
        SHPKG_REPO_SRC_DIR="${SHPKG_SRC_DIR}/${SHPKG_REPO_DIR}"
        if [ -x "${SHPKG_REPO_SRC_DIR}/autogen" ]; then
            ( verbose 1 cd "${SHPKG_REPO_SRC_DIR}" &&
                  verbose 1 ./autogen; )
        elif [ -f "${SHPKG_REPO_SRC_DIR}/autogen.sh" ]; then
            ( verbose 1 cd "${SHPKG_SRC_DIR}/${SHPKG_REPO_DIR}" &&
                  verbose 1 sh autogen.sh; )
        elif [ -x "${SHPKG_REPO_SRC_DIR}/bootstrap" ]; then
            ( verbose 1 cd "${SHPKG_REPO_SRC_DIR}" &&
                  verbose 1 ./bootstrap; )
        fi
    done
}

shpkg_build () {
    for SHPKG_REPO; do
        SHPKG_REPO_DIR="$(shpkg_dir "${SHPKG_REPO}")"
        SHPKG_REPO_OBJ_DIR="${SHPKG_OBJ_DIR}/${SHPKG_REPO_DIR}"
        SHPKG_REPO_SRC_DIR="${SHPKG_SRC_DIR}/${SHPKG_REPO_DIR}"
        SHPKG_REPO_VERSION="$(shpkg_version "${SHPKG_REPO}")"
	if shpkg__tag_is_absent build-done; then
	    ( verbose 2 shpkg_configure "${SHPKG_REPO}"; )
            SHPKG_REPO_VERSION="$(shpkg_version "${SHPKG_REPO}")"
            if [ -f "${SHPKG_REPO_SRC_DIR}/Makefile" ]; then
		( verbose 1 cd "${SHPKG_REPO_SRC_DIR}" &&
                      verbose 1 make; )
            elif [ -f "${SHPKG_SRC_DIR}/${SHPKG_REPO_DIR}/CMakeLists.txt" ]; then
		cmake --build "${SHPKG_REPO_OBJ_DIR}"
            fi
            shpkg__tag_write build-done
	fi
    done
}

shpkg_checksum () {
    find . -type f | cut -c 3- | while read F; do
        "shpkg_${SHPKG_SHA256}" "$F"
    done
}

shpkg_clean_build () {
    for SHPKG_REPO; do
        SHPKG_REPO_DIR="$(shpkg_dir "${SHPKG_REPO}")"
        SHPKG_REPO_OBJ_DIR="${SHPKG_OBJ_DIR}/${SHPKG_REPO_DIR}"
        SHPKG_REPO_SRC_DIR="${SHPKG_SRC_DIR}/${SHPKG_REPO_DIR}"
        SHPKG_REPO_VERSION="$(shpkg_version "${SHPKG_REPO}")"
        if [ -f "${SHPKG_REPO_SRC_DIR}/Makefile" ]; then
	    ( verbose 1 cd "${SHPKG_REPO_SRC_DIR}" &&
                  verbose 1 make clean; )
        fi
        if [ -d "${SHPKG_REPO_OBJ_DIR}" ]; then
            verbose 1 rm -rf "${SHPKG_REPO_OBJ_DIR}"
        fi
        shpkg__tag_remove build-done
    done
}

shpkg_clean_configure () {
    for SHPKG_REPO; do
        SHPKG_REPO_DIR="$(shpkg_dir "${SHPKG_REPO}")"
        SHPKG_REPO_VERSION="$(shpkg_version "${SHPKG_REPO}")"
        shpkg__tag_remove configure-done
    done
}

shpkg_configure () {
    for SHPKG_REPO; do
        SHPKG_REPO_DIR="$(shpkg_dir "${SHPKG_REPO}")"
        SHPKG_REPO_FAKE_DIR="$(shpkg_fake_dir "${SHPKG_REPO}")"
        SHPKG_REPO_SRC_DIR="${SHPKG_SRC_DIR}/${SHPKG_REPO_DIR}"
        SHPKG_REPO_VERSION="$(shpkg_version "${SHPKG_REPO}")"
	if shpkg__tag_is_absent configure-done; then
            ( verbose 2 shpkg_autogen "${SHPKG_REPO}"; )
            SHPKG_REPO_VERSION="$(shpkg_version "${SHPKG_REPO}")"
            if ! [ -d "${SHPKG_REPO_FAKE_DIR}" ]; then
                verbose 1 mkdir -p "${SHPKG_REPO_FAKE_DIR}"
            fi
            if [ -x "${SHPKG_REPO_SRC_DIR}/configure" ]; then
                ( verbose 1 cd "${SHPKG_REPO_SRC_DIR}" &&
                      verbose 1 ./configure --prefix "${SHPKG_PREFIX}"; )
            elif [ -x "${SHPKG_REPO_SRC_DIR}/configure.sh" ]; then
                ( verbose 1 cd "${SHPKG_REPO_SRC_DIR}" &&
                      verbose 1 ./configure.sh --prefix "${SHPKG_PREFIX}"; )
            elif [ -f "${SHPKG_REPO_SRC_DIR}/CMakeLists.txt" ]; then
                verbose 1 cmake -S "${SHPKG_REPO_SRC_DIR}" -B "${SHPKG_OBJ_DIR}/${SHPKG_REPO_DIR}" -D CMAKE_INSTALL_PREFIX:PATH="${SHPKG_PREFIX}" -D BUILD_SHARED_LIBS=ON
            fi
            shpkg__tag_write configure-done
        fi
    done
}

shpkg_fake () {
    verbose 2 shpkg_build "$@"
    for SHPKG_REPO; do
        SHPKG_REPO_DIR="$(shpkg_dir "${SHPKG_REPO}")"
        SHPKG_REPO_FAKE_DIR="$(shpkg_fake_dir "${SHPKG_REPO}")"
        SHPKG_REPO_SRC_DIR="${SHPKG_SRC_DIR}/${SHPKG_REPO_DIR}"
        if [ -d "${SHPKG_REPO_FAKE_DIR}" ]; then
	    verbose 1 rm -rf "${SHPKG_REPO_FAKE_DIR}"
	fi
        verbose 1 mkdir -p "${SHPKG_REPO_FAKE_DIR}"
        if [ -f "${SHPKG_REPO_SRC_DIR}/Makefile" ]; then
            ( verbose 1 cd "${SHPKG_REPO_SRC_DIR}" &&
                  verbose 1 make prefix="${SHPKG_REPO_FAKE_DIR}" install; )
        elif [ -f "${SHPKG_REPO_SRC_DIR}/CMakeLists.txt" ]; then
            verbose 1 cmake --install "${SHPKG_OBJ_DIR}/${SHPKG_REPO_DIR}" --prefix "${SHPKG_REPO_FAKE_DIR}"
        fi
    done
}

shpkg_fake_dir () {
    echo "${SHPKG_FAKE_DIR}/$(shpkg_dir "$1")/${SHPKG_PREFIX}"
}

shpkg_package () {
    for SHPKG_REPO; do
        SHPKG_REPO_DIR="$(shpkg_dir "${SHPKG_REPO}")"
        SHPKG_REPO_VERSION="$(shpkg_version "${SHPKG_REPO}")"
        SHPKG_REPO_PACKAGE="${SHPKG_PACKAGE_DIR}/${SHPKG_REPO_DIR}-${SHPKG_REPO_VERSION}.tgz"
	if ! [ -f "${SHPKG_REPO_PACKAGE}" ]; then
            SHPKG_REPO_FAKE_DIR="$(shpkg_fake_dir "${SHPKG_REPO}")"
	    verbose 2 shpkg_fake "${SHPKG_REPO}"
            SHPKG_REPO_VERSION="$(shpkg_version "${SHPKG_REPO}")"
            SHPKG_REPO_PACKAGE="${SHPKG_PACKAGE_DIR}/${SHPKG_REPO_DIR}-${SHPKG_REPO_VERSION}.tgz"
            SHPKG_REPO_PACKAGE_CHECKSUM="${SHPKG_PACKAGE_DIR}/${SHPKG_REPO_DIR}-${SHPKG_REPO_VERSION}.SHA256"
            SHPKG_REPO_PACKAGE_DIR="$(dirname "${SHPKG_REPO_PACKAGE}")"
            if ! [ -d "${SHPKG_REPO_PACKAGE_DIR}" ]; then
		verbose 1 mkdir -p "${SHPKG_REPO_PACKAGE_DIR}"
            fi
            ( verbose 1 cd "${SHPKG_REPO_FAKE_DIR}" &&
                  verbose -n 1 "shpkg_checksum > ${SHPKG_REPO_PACKAGE_CHECKSUM}" &&
                  shpkg_checksum > "${SHPKG_REPO_PACKAGE_CHECKSUM}" &&
		  verbose -n 1 "pax -wz . > ${SHPKG_REPO_PACKAGE}" &&
		  pax -wz . > "${SHPKG_REPO_PACKAGE}" )
	fi
    done
}

# requires checked-out sources (git clone first)
shpkg__tag_is_absent() {
    SHPKG_REPO_TAG_DIR="${SHPKG_TAG_DIR}/${SHPKG_REPO_DIR}/${SHPKG_REPO_VERSION}"
    ! [ -f "${SHPKG_REPO_TAG_DIR}/$1" ]
}

shpkg__tag_remove() {
    for SHPKG_TAG; do
        SHPKG_REPO_TAG_DIR="${SHPKG_TAG_DIR}/${SHPKG_REPO_DIR}/${SHPKG_REPO_VERSION}"
        if [ -f "${SHPKG_REPO_TAG_DIR}/${SHPKG_TAG}" ]; then
            verbose 1 rm "${SHPKG_REPO_TAG_DIR}/${SHPKG_TAG}"
        fi
    done
}

shpkg__tag_write() {
    for SHPKG_TAG; do
        SHPKG_REPO_TAG_DIR="${SHPKG_TAG_DIR}/${SHPKG_REPO_DIR}/${SHPKG_REPO_VERSION}"
        if ! [ -d "${SHPKG_REPO_TAG_DIR}" ]; then
            verbose 1 mkdir -p "${SHPKG_REPO_TAG_DIR}"
        fi
        verbose -n 1 "echo ${SHPKG_DATE} > ${SHPKG_REPO_TAG_DIR}/${SHPKG_TAG}"
        echo "${SHPKG_DATE}" > "${SHPKG_REPO_TAG_DIR}/${SHPKG_TAG}"
    done
}

# Packages
shpkg_install () {
    for SHPKG_REPO; do
        SHPKG_REPO_DIR="$(shpkg_dir "${SHPKG_REPO}")"
        if ! grep -Eq "^${SHPKG_REPO_DIR}\$" "${SHPKG_OS_DIR}/system_packages"; then
            SHPKG_REPO_VERSION="$(shpkg_version "${SHPKG_REPO}")"
            SHPKG_REPO_PACKAGE="${SHPKG_PACKAGE_DIR}/${SHPKG_REPO_DIR}-${SHPKG_REPO_VERSION}.tgz"
	    SHPKG_REPO_INSTALLED="${SHPKG_VAR_DB_DIR}/installed/${SHPKG_REPO_DIR}"
	    SHPKG_REPO_INSTALLED_DIR="$(dirname "${SHPKG_REPO_INSTALLED}")"
	    if ! [ -f "${SHPKG_REPO_INSTALLED}" ] ||
		    ! head -n 1 < "${SHPKG_REPO_INSTALLED}" |
		        grep "Version: ${SHPKG_REPO_VERSION}" >/dev/null; then
	        ( verbose 2 shpkg_install_dependencies "${SHPKG_REPO}"; )
	        ( verbose 2 shpkg_build "${SHPKG_REPO}"; )
	        ( verbose 2 shpkg_package "${SHPKG_REPO}"; )
                SHPKG_REPO_VERSION="$(shpkg_version "${SHPKG_REPO}")"
                SHPKG_REPO_PACKAGE="${SHPKG_PACKAGE_DIR}/${SHPKG_REPO_DIR}-${SHPKG_REPO_VERSION}.tgz"
                SHPKG_REPO_PACKAGE_CHECKSUM="${SHPKG_PACKAGE_DIR}/${SHPKG_REPO_DIR}-${SHPKG_REPO_VERSION}.SHA256"
                ( verbose 1 cd "${SHPKG_DIR}" &&
		      verbose -n 1 "pax -rdz < ${SHPKG_REPO_PACKAGE}" &&
		      pax -rdz < "${SHPKG_REPO_PACKAGE}"; )
	        if ! [ -d "${SHPKG_REPO_INSTALLED_DIR}" ]; then
		    verbose 1 mkdir -p "${SHPKG_REPO_INSTALLED_DIR}"
	        fi
	        verbose -n 1 "echo Version: ${SHPKG_REPO_VERSION} > ${SHPKG_REPO_INSTALLED}"
	        echo "Version: ${SHPKG_REPO_VERSION}" > "${SHPKG_REPO_INSTALLED}"
                verbose -n 1 "cat ${SHPKG_REPO_PACKAGE_CHECKSUM} >> ${SHPKG_REPO_INSTALLED}"
                cat "${SHPKG_REPO_PACKAGE_CHECKSUM}" >> "${SHPKG_REPO_INSTALLED}"
                verbose 1 libtool --mode=finish "${SHPKG_LIB_DIR}"
	    fi
        fi
    done
}

shpkg_install_dependencies () {
    for SHPKG_REPO; do
        SHPKG_REPO_DEPENDS_ON="$(shpkg_depends_on "${SHPKG_REPO}")"
        if [ "x${SHPKG_REPO_DEPENDS_ON}" != "x" ]; then
            ( verbose 2 shpkg_install ${SHPKG_REPO_DEPENDS_ON}; )
        fi
    done
}

# TODO: remove package files: hash files on install and delete them if not changed
# TODO: remove metadata about installed packages
shpkg_uninstall () {
    for SHPKG_REPO; do
        SHPKG_REPO_DIR="$(shpkg_dir "${SHPKG_REPO}")"
	SHPKG_REPO_INSTALLED="${SHPKG_VAR_DB_DIR}/installed/${SHPKG_REPO_DIR}"
        if [ -f "${SHPKG_REPO_INSTALLED}" ]; then
            verbose 1 cd "${SHPKG_DIR}"
            grep -v : "${SHPKG_REPO_INSTALLED}" |
                cut -d '(' -f 2 |
                cut -d ')' -f 1 |
                while read F; do
                    if grep -E "^SHA256 \\($F\\) = " "${SHPKG_REPO_INSTALLED}" |
                            "${SHPKG_SHA256}" -c; then
                        verbose 1 rm "$F"
                    fi
                done
            verbose 1 rm "${SHPKG_REPO_INSTALLED}"
        fi
    done
}

shpkg_upgrade () {
    verbose 2 shpkg_upgrade_shpkg
    if [ $# -gt 0 ]; then
        verbose 2 shpkg_pull "$@"
        verbose 2 shpkg_build "$@"
        verbose 2 shpkg_package "$@"
        verbose 2 shpkg_install "$@"
    fi
}

shpkg_upgrade_shpkg () {
    ( verbose 1 cd "${SHPKG_DIR}" &&
          verbose 1 git pull &&
          verbose 1 . "${SHPKG_DIR}/share/shpkg/shpkg.subr"; )
}

# Clean
shpkg_clean_all() {
    for SHPKG_REPO; do
        SHPKG_REPO_DIR="$(shpkg_dir "${SHPKG_REPO}")"
        SHPKG_REPO_FAKE_DIR="$(shpkg_fake_dir "${SHPKG_REPO}")"
        verbose 1 rm -rf "${SHPKG_REPO_FAKE_DIR}"
        SHPKG_REPO_OBJ_DIR="${SHPKG_OBJ_DIR}/${SHPKG_REPO_DIR}"
        verbose 1 rm -rf "${SHPKG_REPO_OBJ_DIR}"
        SHPKG_REPO_PACKAGE="${SHPKG_PACKAGE_DIR}/${SHPKG_REPO_DIR}"
        verbose 1 rm -rf "${SHPKG_REPO_PACKAGE}"-*
        SHPKG_REPO_SRC_DIR="${SHPKG_SRC_DIR}/${SHPKG_REPO_DIR}"
        verbose 1 rm -rf "${SHPKG_REPO_SRC_DIR}"
        SHPKG_REPO_TAG_DIR="${SHPKG_TAG_DIR}/${SHPKG_REPO_DIR}"
        verbose 1 rm -rf "${SHPKG_REPO_TAG_DIR}"
    done
}
